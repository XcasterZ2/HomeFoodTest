generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           Int          @id @default(autoincrement())
  email        String?      @unique
  fullname     String?
  role         String       @default("user")
  phoneNumber  String?      @unique
  googleId     String?      @unique
  facebookId   String?      @unique
  lineId       String?      @unique
  birthDate    DateTime?
  gen          String?
  profileImage String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  pinNumber    Int?
  restaurant   restaurant[]
  reviews      Review[]
  cartItems    CartItem[]
}

model restaurant {
  restaurant_Id   Int     @id @default(autoincrement())
  name            String
  restaurantImage String?
  phoneNumber     String?
  ownerFullname   String?
  location        String?
  paymentMetod    String?
  License         String?
  ownerId         Int
  status          String?
  dayscloseOpen   String?
  daystartOpen    String?
  timecloseOpen   String?
  timestartOpen   String?
  email           String?
  User            User    @relation(fields: [ownerId], references: [id])
  menus           Menu[]
  averageRating   Float?
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  menuId    Int
  user      User     @relation(fields: [userId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])

  @@index([userId])
  @@index([menuId])
}

model Menu {
  id            Int        @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  image         String?
  category      String?
  isAvailable   Boolean    @default(true)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  restaurantId  Int
  restaurant    restaurant @relation(fields: [restaurantId], references: [restaurant_Id])
  reviews       Review[]
  averageRating Float?
  cartItems     CartItem[]

  @@index([restaurantId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  menuId    Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  menu      Menu     @relation(fields: [menuId], references: [id])

  @@unique([userId, menuId])
  @@index([userId])
  @@index([menuId])
}
